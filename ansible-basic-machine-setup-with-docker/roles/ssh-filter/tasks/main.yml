---
# task for role ssh-filter
# 1. Install geoip packages.
- name: update packages
  apt: update_cache=yes

- name: Install geoip packages.
  apt:
    name={{item}}
    state=present
  with_items: "{{ geoip_packages }}"

# 4. Copy executables to /usr/local/bin/
- name: Copy sshfilter executable to /usr/local/bin/sshfilter.
  copy:
    src: ./files/ssh-geoip-filter/files/usr/local/bin/sshfilter
    dest: /usr/local/bin/sshfilter
    owner: root
    group: root
    mode: 0775

- name: Copy update-geoip executable to /usr/local/bin/update-geoip.
  copy:
    src: ./files/ssh-geoip-filter/files/usr/local/bin/update-geoip
    dest: /usr/local/bin/update-geoip
    owner: root
    group: root
    mode: 0775

### Create configuration
- name: Ensure configuration for sshfilter is set.
  template:
    src: ./templates/etc/sshfilter.conf.j2
    dest: /etc/sshfilter.conf
    mode: 0644

# 5. Update the geoip database
- name: Update the geoip database.
  command: /usr/local/bin/update-geoip

# 6. Test if 'sshfilter' is working

# 6a. Test if geoiplookup is working
#
# Remove leading and trailing space:
# https://stackoverflow.com/q/369758/2377454
- name: Test IP "{{ test_geoiplookup_ip }}" with geoiplookup.
  shell: >
    /usr/bin/geoiplookup "{{ test_geoiplookup_ip }}" | \
      awk -F':' '{print $2}'  | \
      sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' | \
      cut -c1-2
  register: geoiplookup_test

- name: Check that the geoip test result is the same as expected.
  fail:
    msg: "geoiplookup test failed ({{ geoiplookup_test.stdout }} != {{ test_geoiplookup_ip_geolocation) }})"
  when: geoiplookup_test.stdout != test_geoiplookup_ip_geolocation

# 6b. Test if sshfilter is working
#
# $ sshfilter 8.8.8.8
# DENY sshd connection from 8.8.8.8 (US)
- name: Test IP "{{ test_sshfilter_denied_ip }}" with geoiplookup.
  command: /usr/local/bin/sshfilter -v "{{ test_sshfilter_denied_ip }}"
  ignore_errors: true
  register: sshfilter_denied_test

- name: Check that the DENY sshfilter test result is the same as expected.
  fail:
    msg: "SSH filter (DENY) failed: {{ sshfilter_denied_test.stdout }}"
  when: sshfilter_denied_test.stdout.find('DENY sshd connection from ' + test_sshfilter_denied_ip) != -1

# $ sshfilter 90.147.0.1
# ALLOW sshd connection from 90.147.0.1 (IT)
- name: Test IP "{{ test_sshfilter_allowed_ip }}" with geoiplookup.
  command: /usr/local/bin/sshfilter -v "{{ test_sshfilter_allowed_ip }}"
  register: sshfilter_allowed_test

- name: Check that the sshfilter test result is the same as expected.
  fail:
    msg: "SSH filter (ALLOW) failed: {{ sshfilter_allowed_test.stdout }}"
  when: sshfilter_allowed_test.stdout.find('ALLOW sshd connection from ' + test_sshfilter_allowed_ip) != -1

# 7. Copy TCP wrappers to /etc/hosts.{allow,deny}
- name: Copy hosts.allow to /etc/hosts.allow.
  copy:
    src: ./files/ssh-geoip-filter/files/etc/hosts.allow
    dest: /etc/hosts.allow

- name: Copy hosts.deny to /etc/hosts.deny.
  copy:
    src: ./files/ssh-geoip-filter/files/etc/hosts.deny
    dest: /etc/hosts.deny

# 8. Add a crontab job (as root) to update the geoip database
- name: Add a cron job to update the geoip database.
  cron:
    name: "Update geoip database"
    job: "/usr/local/bin/update-geoip >> /var/log/geoip.log"
    minute: "{{ cron_task.schedule.minute }}"
    hour: "{{ cron_task.schedule.hour }}"
    day: "{{ cron_task.schedule.day }}"
    month: "{{ cron_task.schedule.month }}"
    weekday: "{{ cron_task.schedule.weekday }}"

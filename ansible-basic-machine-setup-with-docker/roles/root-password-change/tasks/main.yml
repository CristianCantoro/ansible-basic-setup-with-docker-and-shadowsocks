---
# Taken from:
#
# https://www.redpill-linpro.com/sysadvent/2017/12/02/ansible-change-passwords.html
#
# Change root password on all nodes in a the hosts specified.
#
# ansible-playbook playbooks/root-password-change.yml -e hostlist=acme
#

# First we ensure that we've got the tools and settings required, and pull the
# latest version of password-store repo.
- any_errors_fatal: true
  become: false

  tasks:
    # Some functions of the playbook require ansible version 2.2 or newer.
    - name: assert ansible version
      assert:
        that:
          - "{{ ansible_version.string | version_compare('2.2', '>=') }}"
        msg: Ansible 2.2 or above is required

    # Make sure we're run with the "-e hostlist=$something", since we need to know
    # what hosts to change the root password for.
    - name: assert hostlist variable is set
      assert:
        that:
          - "false"
        msg: playbook must be executed with '-e hostlist=$hosts', where $hosts can be hostgroup or fqdn
      when: (hostlist is undefined) or (hostlist | trim == '')

    # Check that we've got "diceware" installed. Replace with your favourite
    # password generator. The probe is done by executing "diceware --version",
    # storing the hash/dict "diceware_present". The keys we typically care about
    # in a variable stored by the "command" module, are "rc" (exit value),
    # "stdout", "stderr". In this case we then check the exit value to ensure
    # that "diceware --version"  was executed successfully.
    - name: probe diceware
      command: diceware  --version
      register: diceware_present
      failed_when: 0
    - name: assert diceware installed
      assert:
        that:
          - diceware_present.rc == 0
        msg: diceware password generator is required

    # Make sure our ansible has the "expect" module installed, and that it's a
    # sufficiently new version. This module comes in a separate package. Debian
    # and RedHat based systems have different checks. Note that
    # "ansible_os_family" returns what the distribution is based on, not the
    # distribution itself. In other words "Debian" is Debian-based systems
    # (including Ubuntu), and "RedHat" is RedHat-based systems (including CentOS
    # and Fedora).
    - name: look up python-pexpect version (osfamily=debian)
      command: dpkg-query --showformat='${Version}' --show  python-pexpect
      register: pexpect_version
      failed_when: 0
      when: ansible_os_family == 'Debian'
    - name: assert python-pexpect version (osfamily=debian)
      assert:
        that:
          - "{{ pexpect_version.rc == 0 }}"
          - "{{ pexpect_version.stdout | version_compare('3.3', '>=') }}"
        msg: python-pexpect 3.3 or above is required
      when: ansible_os_family == 'Debian'

    - name: look up pexpect version (osfamily=redhat)
      command: rpm -q --qf "%{VERSION}" pexpect
      register: pexpect_version
      failed_when: 0
      when: ansible_os_family == 'RedHat'
    - name: assert pexpect version (osfamily=redhat)
      assert:
        that:
          - "{{ pexpect_version.rc == 0 }}"
          - "{{ pexpect_version.stdout | version_compare('3.3', '>=') }}"
        msg: pexpect 3.3 or above is required
      when: ansible_os_family == 'RedHat'

    # We've got all the preprequisites to do the password changing we need.
    # Do a git-pull of the password-store git repository, to avoid merge
    # conflicts when we update passwords in it.
    - name: git pull password-store
      command: "pass git pull --rebase"


# The real work -- generate password, store it, and set it on the servers.
- name: update root password on {{ hostlist }}
  hosts: "{{ hostlist }}" # run this list of tasks once for each host in the
                          # supplied hostlist
  become: false # do it as my own user (not root) by default
  any_errors_fatal: true # stop the playbook completely if something fails
  serial: 1 # stop "pass insert" from tripping over its own feet
  vars:
    # Settings for a Nagios/Icinga server with a password age check that needs a
    # forced refresh after setting the password.
    icinga_server: monitoring.example.com
    icinga_check: Root password age

  tasks:
    # Ansible inventory defines some variables for each customer project, which
    # are only used in the password-store file path. Remove these, or exchange
    # with your own.
    - name: assert required variables are defined
      delegate_to: localhost # run it on local workstation instead of remote server
      assert:
        that:
          - "inventory_hostname is defined"
          - "project_team is defined"
          - "project_handle is defined"
        msg: not all of project_team, project_handle and inventory_hostname are defined

    # Swap out diceware with your password generator of choice. Output should be
    # one password (and only that). "apg -n 1" is a good alternative. The "register: dice"
    # stores stdout (amongst others) in the "dice" hash/dict for later use.
    - name: generate new password
      delegate_to: localhost
      command: diceware --no-caps -d ' ' -w en_eff
      register: dice

    # Run "pass insert" to insert the generated password in the password-store.
    # We use the ansible "expect" module to submit the password when "pass insert"
    # asks for it. The "expect" module searches command output for a given regex,
    # and submits a given string as response. the "(?i)password" is the regex (a
    # case insensitive search for "password"), which will prompt ansible to respond
    # with the output from the above password generation command.
    - name: update password in password-store
      delegate_to: localhost # run it on local workstation instead of remote server
      expect:
        command: "pass insert -f {{ project_team.0 }}/{{ project_handle }}/{{ inventory_hostname }}/root"
        responses:
          (?i)password: "{{ dice.stdout }}"

    # Generate the password hash locally, since the Ansible "user" module wants
    # it pre-hashed. A bonus is that it's not transferred un-hashed, which could
    # have temporarily stored it in ansible tempfiles. We again use the "expect"
    # module to submit the earlier generated password when mkpasswd asks for it.
    # We again use "register" to store the result.
    - name: generate password hash
      delegate_to: localhost # run it on local workstation instead of remote server
      expect:
        command: mkpasswd --method=sha-512
        responses:
          (?i)password: "{{ dice.stdout }}"
      register: password_hash

    # Set the password on the remote server. The "user" module takes a
    # sha512-hashed password and updates it on the server in question (note the
    # absence of a "delegate_to"). We use the last line of the stdout of the
    # previous "mkpasswd" command, since some versions of mkpasswd have multiple
    # lines of stdout, and we only want the hashed password itself.
    - name: change password for root user
      become: true # do this as root
      user:
        name: root
        password: "{{ password_hash.stdout_lines[-1] }}"

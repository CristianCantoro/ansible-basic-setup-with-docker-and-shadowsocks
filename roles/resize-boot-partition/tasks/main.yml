---
# tasks file for resize-boot-partition

##############################################################################
#
# https://access.redhat.com/articles/1190213
#
# umount /boot
# swapoff /dev/sda2
#
# fdisk /dev/sda
# delete partition swap
# new partition
#
# e2fsck -f /dev/sda1
# resize2fs /dev/sda1
##############################################################################
 
# Check /boot size partition, if /boot is part of another partition
# - e.g. the root partition - boot_partition_size is empty.
#
# $ df -h /boot
# Filesystem      Size  Used Avail Use% Mounted on
# /dev/sda1        98M   68M   25M  74% /boot
#
- name: Check boot size partiton.
  shell: df '/boot' | grep -E '/boot$' | awk '{print $2}'
  register: boot_partition_size

- set_fact:
    boot_partition_size: "{{ boot_partition_size.stdout }}"

# early failure, if boot_partition size is not set
- fail:
    msg: "boot_partition_size must be different from zero: {{ boot_partition_size }}"
  when: not boot_partition_size

# Gather facts about boot ans swap only if /boot is on a separate partition
# and the partition size is smaller than the minimum.
- block:
  - name: Get boot partition path.
    shell: df -h '/boot' | grep -E '/boot$' | awk '{print $1}'
    register: boot_partition_path

  - set_fact:
      boot_partition_path: "{{ boot_partition_path.stdout }}"

  # determine filesystem tipe of /boot partition
  - name: Determine filesystem tipe of /boot partition.
    command: findmnt -n -o FSTYPE -T /boot
    register: boot_partition_fstype

  - set_fact:
      boot_partition_fstype: "{{ boot_partition_fstype.stdout }}"

  - name: Get device name from boot partition path.
    shell: lsblk -no pkname "{{ boot_partition_path }}"
    register: boot_device_name

  - set_fact:
      device_path: "/dev/{{ boot_device_name.stdout }}"

  # Read device information (always use unit when probing)
  - name: Check that the "{{ device_path }}" exists.
    parted: device="{{ device_path }}" unit='B'
    register: device_info

  - debug:
      var: device_info

  - name: Get boot partition number from boot partition path and boot device.
    shell: echo {{ boot_partition_path }} | sed -e "s#{{ device_path }}##"
    register: boot_partition_number

  - set_fact:
      boot_partition_number: "{{ boot_partition_number.stdout }}"

  - name: Get swap partition path.
    shell: swapon | grep 'partition' | awk '{print $1}'
    register: swap_partition_path

  - set_fact:
      swap_partition_path: "{{ swap_partition_path.stdout }}"

  - name: Get swap partition number.
    shell: echo "{{ swap_partition_path }}" | sed -e "s#{{ device_path }}##"
    register: swap_partition_number

  - set_fact:
      swap_partition_number: "{{ swap_partition_number.stdout }}"

  - name: Assert that swap partition follows boot partition.
    assert:
      that:
        - (swap_partition_number|int) == (boot_partition_number|int) + 1
      msg: "swap partition ({{ swap_partition_path }}) needs to follow boot parition ({{ boot_partition_path }})."

  - name: Convert swapfile_size to bytes.
    shell: >
      echo "{{ resized_boot_partition_size }}" | \
      awk '/[0-9]B?$/{printf "%u\n", $1;next};
           /[tT]B?$/{printf "%u\n", $1*(1024*1024*1024*1024);next};
           /[gG]B?$/{printf "%u\n", $1*(1024*1024*1024);next};
           /[mM]B?$/{printf "%u\n", $1*(1024*1024);next};
           /[kK]B?$/{printf "%u\n", $1*1024;next};'
    register: resized_boot_partition_size_bytes

  - set_fact:
      resized_boot_partition_size_bytes: "{{ resized_boot_partition_size_bytes.stdout|int }}"

  - name: Get boot partition start.
    set_fact:
      boot_partition_start: "{{ device_info.partitions[(boot_partition_number|int)-1].begin|int }}"

  - name: Get swap partition start.
    set_fact:
      swap_partition_start: "{{ (boot_partition_start|int)+(resized_boot_partition_size_bytes|int)|int }}"

  - name: Get swap partition end.
    set_fact:
      swap_partition_end: "{{ device_info.partitions[(swap_partition_number|int)-1].end|int }}"

  - name: Get boot partitition UUID
    command: blkid -s UUID -o value "{{ boot_partition_path }}"
    register: boot_partition_uuid_old

  - set_fact:
      boot_partition_uuid_old: "{{ boot_partition_uuid_old.stdout }}"

  - name: Get swap partitition UUID
    command: blkid -s UUID -o value "{{ swap_partition_path }}"
    register: swap_partition_uuid_old

  - set_fact:
      swap_partition_uuid_old: "{{ swap_partition_uuid_old.stdout }}"

  when: "(boot_partition_size|int) < (boot_partition_minimum_size|int)"

# Resize boot partition only if /boot is on a separate partition and the
# partition size is smaller than the minimum.
- block:

  # $ fdisk -l /dev/sda
  # Disk /dev/sda: 10 GiB, 10737418240 bytes, 20971520 sectors
  # Units: sectors of 1 * 512 = 512 bytes
  # Sector size (logical/physical): 512 bytes / 512 bytes 
  # I/O size (minimum/optimal): 512 bytes / 512 bytes
  # Disklabel type: dos
  # Disk identifier: 0x96aa80ad
  #
  # Device     Boot   Start      End  Sectors  Size Id Type
  # /dev/sda1  *       2048   208895   206848  101M 83 Linux
  # /dev/sda2        208896  4362239  4153344    2G 82 Linux swap / Solaris
  # /dev/sda3       4362240 20969471 16607232  7,9G 8e Linux LVM


  # http://docs.ansible.com/ansible/latest/modules/mount_module.html
  - name: Unmount /boot.
    mount:
      path: /boot
      state: unmounted

  - name: Deactivate swap.
    command: swapoff "{{ swap_partition_path }}"

  # Remove swap partition
  - name: Remove swap partition.
    parted:
      device: "{{ device_path }}"
      number: "{{ swap_partition_number }}"
      unit: 'B'
      state: absent

  # Recreate swap partition
  - name: Recreate swap partition.
    parted:
      device: "{{ device_path }}"
      number: "{{ swap_partition_number }}"
      part_type: primary
      unit: 'B'
      state: present
      part_start: "{{ swap_partition_start }}B"
      part_end: "{{ swap_partition_end }}B"

  - name: Make swap partition a swap area.
    shell: mkswap "{{ swap_partition_path }}"

  - name: Activate swap partition.
    shell: swapon "{{ swap_partition_path }}"

  # parted does not resize: https://github.com/ansible/ansible/issues/23914
  - name: Resize /boot partition.
    # Request resize, ack resize of partition that is in use (when requested).
    # https://bugs.launchpad.net/ubuntu/+source/parted/+bug/1270203
    # https://unix.stackexchange.com/a/365657
    shell: >
      parted "{{ device_path }}" \
             resizepart \
             "{{ boot_partition_number }}" \
             "{{ (swap_partition_start|int)-1|int }}B"

  - name: Run e2fsck on /boot.
    shell: e2fsck -p -f "{{ boot_partition_path }}"

  - name: Grow /boot until maximum block size.
    filesystem:
      dev: "{{ boot_partition_path }}"
      fstype: "{{ boot_partition_fstype }}"
      resizefs: yes

  # fstab check UUID of swap and boot
  - name: Get boot partitition UUID
    command: blkid -s UUID -o value "{{ boot_partition_path }}"
    register: boot_partition_uuid

  - set_fact:
      boot_partition_uuid: "{{ boot_partition_uuid.stdout }}"

  - name: Get swap partitition UUID
    command: blkid -s UUID -o value "{{ swap_partition_path }}"
    register: swap_partition_uuid

  - set_fact:
      swap_partition_uuid: "{{ swap_partition_uuid.stdout }}"

  # See:
  #   * ansible replace regex with variable
  #     https://serverfault.com/q/825372/155367
  - name: Ensure new boot partition is listed in /etc/fstab.
    replace:
      path: /etc/fstab
      regexp: >-
        ^UUID="{{ boot_partition_uuid_old }}"(.*)$
      replace: >-
        UUID="{{ boot_partition_uuid }}"\1
      backup: yes
    notify: mountall

  - name: Ensure new swap UUID is listed in /etc/fstab.
    replace:
      path: /etc/fstab
      regexp: >-
        ^UUID="{{ swap_partition_uuid_old }}"(.*)$
      replace: >-
        UUID="{{ swap_partition_uuid }}"\1
      backup: yes
    notify: mountall

  when: "(boot_partition_size|int) < (boot_partition_minimum_size|int)"
  rescue:
    - debug:
       msg: 'Error caught, re-mounting /boot'

    - name: Check if /boot is mounted
      command: mountpoint -q /boot
      register: boot_not_mounted
      ignore_errors: true

    - set_fact:
        boot_is_mounted: "{{ boot_not_mounted.rc }}"

    - name: Re-mounting /boot
      command: mount "{{ boot_partition_path }}" /boot
      when: boot_not_mounted

    - name: Check if swap is activated
      command: swapon | grep "{{ swap_partition_path }}"
      when: swap_not_active
      ignore_errors: true

    - set_fact:
        swap_not_active: "{{ swap_not_active.rc }}"

    - block:
      - name: Make swap partition a swap area.
        shell: mkswap "{{ swap_partition_path }}"
        ignore_errors: true

      - name: Activate swap partition.
        shell: swapon "{{ swap_partition_path }}"

      when: swap_not_active

    - fail:
        msg: "Error caught, exiting"
